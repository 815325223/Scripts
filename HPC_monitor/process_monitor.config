# Defines, variables, email template and kill_log_mail function
#

# Variable definitions
USER_UID_MIN=999                                # only watch uids in this range
USER_UID_MAX=200000                             #
MAX_CPU=80                                      # percent cpu limits
MAX_MEMORY=25                                   # percent memory limit
BASE_DIR=/var/run/process_monitor               # where store history files
TEMPFILE=${BASE_DIR}/process_monitor.out        # ps output 
HISTFILE=${BASE_DIR}/process_monitor.history    # tracks multiple process violations
LOGFILE=/var/log/process_monitor                # actions logged to this file
REPLY_EMAIL=example@qq.com		        # email notice reply-to address
FROM_EMAIL=SYSTEM			        # notice spoofed as coming from this address

#
# Template for notifiaction email sent to users
# _XXX_ replaced with sed in build_mail()
#
MAIL_TEMPLATE="你好 _USER_,

在登录节点 _HOST_ 上的 _USER_ 帐号下运行的一个资源密集型进程已被终止。

日期    : _DATE_
命令    : _COMMAND_
进程号  : _PID_
%内存   : _MEMORY_
%CPU    : _CPU_
主机名  : _HOST_

直接在登录节点上运行此类进程会对所有的用户产生影响，它是不被允许的。往后，请不要在登录节点上直接运行资源密集型进程。反之，你可以通过作业调度系统提交资源密集型的作业至计算节点。关于资源使用率请通过以下链接进行查看。

http://monitor.example.com

如果你对被终止的程序有疑问，请回复此消息至 example@qq.com 以寻求帮助。

谢谢配合，

{USER}
"

#
# collect user mail address
#
function mail_info(){
    info_line=`sed -n "/^$1/p" $2`
    if [[ -z $info_line ]];then
        echo "$1为空，请核查"
        exit 4
    fi
    tmp_str=$1
    tmp_len=${#tmp_str}+1
    echo ${info_line:${tmp_len}}
}

#
# kill violating process and send notice
#
function kill_log_mail {                    
    USER_STRING=$(getent passwd ${USER} | cut -f 1 -d ":")
    USER_NAME=$(getent passwd ${USER} | cut -f 5 -d ":")
    COMMAND=$(ps -o args ${PID} | grep -v COMMAND) 
    MAIL_BODY="User $USER_STRING using ${CPU}% cpu and ${MEMORY}% memory PID=${PID} COMMAND=${COMMAND}"
    MAIL_SUBJECT="Terminated CPU intensive process on $(hostname) ${USER_NAME} (${USER_STRING}) $(date +%Y%m%d)"
    echo "$(date): $MAIL_BODY" >> $LOGFILE

    # ignore rsync and sftp commands, add others to egrep command
    if [ "$(echo ${COMMAND} | egrep 'rsync|sftp-server|sshd|java')" == "" ] && [ "${COMMAND}" != "" ]; then
	kill ${PID} >> $LOGFILE
	sleep 1
	if [ ! -d /proc/${PID} ]; then
	    echo "$(date): Kill PID:${PID} Success" >> $LOGFILE
	else
	    kill -9 ${PID} >> $LOGFILE
            sleep 1
	    if [ ! -d /proc/${PID} ];then
		echo "$(date): Kill -9 PID:${PID} Success" >> $LOGFILE
	    else
		echo "$(date): Kill and Kill -9 PID:${PID} Failure" >> $LOGFILE
	    fi
	fi

	export replyto=${REPLY_EMAIL}
	export from=${FROM_EMAIL}
   	#echo "$(build_mail)"  | mail -s "${MAIL_SUBJECT}" $USER_STRING
        mail_user=`mail_info $USER_STRING /opt/ProcessMonitor/namelist`
        echo "$(build_mail)"  | mail -A {USER} -s "${MAIL_SUBJECT}" $mail_user@example.com
   else
        echo "$(date): Ignoring ${COMMAND} with PID:${PID}" >> $LOGFILE
   fi

}


#
# generate email text from stub message
#
function build_mail {

  # replace any special characters 
  SED_COMMAND=$(echo ${COMMAND} | sed 's/[\&/]/\\&/g')

  REPLY=$(echo "${MAIL_TEMPLATE}" | sed -e "s/_NAME_/${USER_NAME}/")
  REPLY=$(echo "$REPLY" | sed -e "s/_USER_/${USER_STRING}/" )
  REPLY=$(echo "$REPLY" | sed -e "s/_DATE_/$(date)/" )
  REPLY=$(echo "$REPLY" | sed "s/_COMMAND_/${SED_COMMAND}/" )
  REPLY=$(echo "$REPLY" | sed -e "s/_PID_/${PID}/" )
  REPLY=$(echo "$REPLY" | sed -e "s/_MEMORY_/${MEMORY}/" )
  REPLY=$(echo "$REPLY" | sed -e "s/_CPU_/${CPU}/" )
  REPLY=$(echo "$REPLY" | sed -e "s/_HOST_/$(hostname)/" )

  echo "${REPLY}"

}
